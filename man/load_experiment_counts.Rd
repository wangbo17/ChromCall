% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/07_load_experiment_counts.R
\name{load_experiment_counts}
\alias{load_experiment_counts}
\title{Load Experiment Counts from a BAM File}
\usage{
load_experiment_counts(file, paired, genome_tiles, regions)
}
\arguments{
\item{file}{Path to the BAM file.}

\item{paired}{Logical. If TRUE, input BAM is assumed to be paired-end
and reads are loaded as fragments. If FALSE, input BAM is treated as single-end.}

\item{genome_tiles}{A \link[GenomicRanges:GRanges-class]{GenomicRanges::GRanges} object defining genome-wide tiling regions.}

\item{regions}{A \link[GenomicRanges:GRanges-class]{GenomicRanges::GRanges} object defining target regions (e.g., promoters). Can include a 'blacklist' column.}
}
\value{
A named list with two elements:
\describe{
\item{counts}{An integer vector of read counts for each region in \code{regions}.}
\item{lambda_g}{A numeric value representing the estimated genomic background lambda.}
}
}
\description{
Load sequencing reads from a BAM file, count overlaps with specified genome tiles and target regions,
and compute a genomic lambda value representing the background signal.
}
\examples{
# Load example BAM file and genome info
bam_file <- system.file("extdata", "example.bam", package = "chromcall")
genome_file <- system.file("extdata", "genome.txt", package = "chromcall")
genome <- load_genome(genome_file)
# Load blacklist
blacklist_file <- system.file("extdata", "blacklist.bed", package = "chromcall")
blacklist <- load_bedfile(blacklist_file, genome = genome)

# Create genome tiles (e.g., 10kb)
tiles <- tile_genome(genome, window_size = 10000)
tiles_with_bl <- tile_genome(genome, window_size = 10000, blacklist = blacklist)

# Load promoter regions and annotate blacklist overlaps
promoter_file <- system.file("extdata", "example.bed", package = "chromcall")
promoters <- load_windows(promoter_file, genome = genome, blacklist = blacklist)

# Run experiment counts and lambda estimation
res <- load_experiment_counts(
  file = bam_file,
  paired = TRUE,
  genome_tiles = tiles_with_bl,
  regions = promoters
)

# Inspect results
res$counts     # Read counts per region
res$lambda_g   # Estimated lambda background

}
